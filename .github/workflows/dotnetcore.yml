name: CI/CD Pipeline

on:
  push:
  pull_request:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

  PROJECT_NAME: FluentValidationLister.Filter
  TESTS_NAME: FluentValidationLister.Tests

  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_HOME: https://www.nuget.org/packages
  NUGET_BADGE: https://img.shields.io/nuget/dt
  NUGET_TOKEN: ${{ secrets.NUGET_KEY }}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'

    - name: Restore project
      run: dotnet restore $PROJECT_NAME/$PROJECT_NAME.csproj

    - name: Build project
      run: dotnet build $PROJECT_NAME/$PROJECT_NAME.csproj --no-restore --configuration Release

    - name: Restore & build tests
      run: dotnet build $TESTS_NAME/$TESTS_NAME.csproj --configuration Release

    - name: Run tests
      run: dotnet test --no-restore --no-build --configuration Release

  deploy:
    # Publish new release when pushed to main
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Set package version from .csproj
        id: set_version
        run: |
          version=$(grep -oPm1 "(?<=<Version>)[^<]+" $PROJECT_NAME/$PROJECT_NAME.csproj)
          echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV

      - name: Pack the project
        run: dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$PACKAGE_VERSION $PROJECT_NAME/$PROJECT_NAME.csproj

      - name: Push package to NuGet (including symbols)
        run: dotnet nuget push ./$PROJECT_NAME/bin/Release/*.nupkg --skip-duplicate  --source $NUGET_FEED --api-key $NUGET_TOKEN

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v$PACKAGE_VERSION
          name: v$PACKAGE_VERSION
          generate_release_notes: true

      - name: Append NuGet link to release notes
        run: |
          release_tag="v$PACKAGE_VERSION"
          nuget_link="## Downloads"$'\n'"Binary can be downloaded from NuGet;"$'\n'"📦 $NUGET_HOME/$PROJECT_NAME/$PACKAGE_VERSION"
          nuget_badge="![NuGet Downloads]($NUGET_BADGE/$PROJECT_NAME?style=plastic&logo=nuget)"
    
          existing_notes=$(gh release view "$release_tag" --json body -q ".body")
          updated_notes="$existing_notes"$'\n\n'"$nuget_link"$'\n\n'"$nuget_badge"
    
          gh release edit "$release_tag" --notes "$updated_notes"

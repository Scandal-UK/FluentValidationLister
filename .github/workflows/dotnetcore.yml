name: CI-CD Pipeline

on:
  push:
  pull_request:
  release:
    types:
      - published

env:
  # Performance optimisations
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

  # Filename shortcuts
  PROJECT_NAME: FluentValidationLister.Filter
  TESTS_NAME: FluentValidationLister.Tests

  # GitHub params
  GITHUB_FEED: https://nuget.pkg.github.com/scandal-uk/
  GITHUB_USER: scandal-uk
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NuGet params
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_TOKEN: ${{ secrets.NUGET_KEY }}

permissions:
  contents: write # Required to push tags and merge branches

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.x'

    # Build and run the unit tests
    - name: Restore project
      run: dotnet restore $PROJECT_NAME/$PROJECT_NAME.csproj

    - name: Build project
      run: dotnet build $PROJECT_NAME/$PROJECT_NAME.csproj --no-restore --configuration Release

    - name: Restore tests
      run: dotnet restore $TESTS_NAME/$TESTS_NAME.csproj

    - name: Build tests
      run: dotnet build $TESTS_NAME/$TESTS_NAME.csproj --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-restore --no-build --configuration Release

  prerelease:
    # Push the prerelease build to the GitHub feed for anything targeting develop branch
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"
  
      # Package artifact using the date and rc (release candidate) version suffix
      - name: Package project
        run: |
          VERSION=${{ steps.date.outputs.date }}-rc
          dotnet pack -v normal -c Debug --include-symbols --include-source -p:PackageVersion=$VERSION $PROJECT_NAME/$PROJECT_NAME.csproj

      - name: Push build to GitHub feed
        run: |
          dotnet nuget push ./${{ env.PROJECT_NAME }}/bin/Debug/*.nupkg --skip-duplicate --source $GITHUB_FEED --api-key $GITHUB_TOKEN

  deploy:
    # Release a fresh build to Nuget when pushed to main
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Set package version from .csproj
        id: set_version
        run: |
          version=$(grep -oPm1 "(?<=<Version>)[^<]+" FluentValidationLister/FluentValidationLister.csproj)
          echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV

      - name: Pack the project
        run: dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$PACKAGE_VERSION $PROJECT_NAME/$PROJECT_NAME.csproj

      - name: Push build to NuGet including symbols
        run: dotnet nuget push ./**/*.nupkg --skip-duplicate  --source $NUGET_FEED --api-key $NUGET_TOKEN

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          name: v${{ env.PACKAGE_VERSION }}
          generate_release_notes: true

      - name: Merge main into develop
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout develop
          git merge origin/main --no-edit
          git push origin develop

      - name: Append NuGet badge to release notes
        run: |
          release_tag="v${{ env.PACKAGE_VERSION }}"
          nuget_badge="[![NuGet](https://img.shields.io/nuget/v/FluentValidationLister.Filter.svg?label=NuGet)](https://www.nuget.org/packages/FluentValidationLister.Filter/${{ env.PACKAGE_VERSION }})"
    
          existing_notes=$(gh release view "$release_tag" --json body -q ".body")
          updated_notes="$existing_notes"$'\n\n'"$nuget_badge"
    
          gh release edit "$release_tag" --notes "$updated_notes"
